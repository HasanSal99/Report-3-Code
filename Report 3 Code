import numpy as np
from matplotlib import pyplot as plt

with open("datafile.csv") as file_name:
    dataarray = np.loadtxt(file_name, delimiter=", ", skiprows=1)

    
mw12_list = []
mw13_list = []
mw23_list = []
accepted12_lines = []
accepted13_lines = []
accepted23_lines = []
combination_counts=[]
for line in dataarray:
    # 3 possibilities to pair  2 light jets:
    combination_count=0
    m12 = np.sqrt((line[13]+line[17])**2 - (line[14]+line[18])**2 - (line[15]+line[19])**2 - (line[16]+line[20])**2)/1000 
    m13 = np.sqrt((line[13]+line[21])**2 - (line[14]+line[22])**2 - (line[15]+line[23])**2 - (line[16]+line[24])**2)/1000  
    m23 = np.sqrt((line[17]+line[21])**2 - (line[18]+line[22])**2 - (line[19]+line[23])**2 - (line[20]+line[24])**2)/1000
    if abs(m12-80)<40:
        mw12_list.append(m12)
        accepted12_lines.append(line)
        combination_count+=1
    if abs(m13-80)<40:
        mw13_list.append(m13)
        accepted13_lines.append(line)
        combination_count+=1
    if abs(m23-80)<40:    
        mw23_list.append(m23)
        accepted23_lines.append(line)
        combination_count+=1
    combination_counts.append(combination_count)
print (len(combination_counts))
print (combination_counts)
mw12_mean, mw13_mean, mw23_mean = np.mean(mw12_list), np.mean(mw13_list), np.mean(mw23_list)
print('Means of:', mw12_mean, mw13_mean, mw23_mean)

#Calculating the invariant masses
ivm12_muons=[] #invariant mass using Muons
ivm12_w=[] #invariant mass using WBoson
for line in accepted12_lines:
    muon = np.sqrt((2*line[1]+line[5]+line[9])**2-(2*line[2]+line[6]+line[10])**2-(2*line[3]+line[7]+line[11])**2-(2*line[4]+line[8]+line[12])**2)/2000
    w = np.sqrt((line[5]+line[9]+line[13]+line[17])**2-(line[6]+line[10]+line[14]+line[18])**2-(line[7]+line[11]+line[15]+line[19])**2-(line[8]+line[12]+line[16]+line[20])**2)/2000
    ivm12_muons.append(muon)
    ivm12_w.append(w)

ivm13_muons=[] #invariant mass using Muons
ivm13_w=[] #invariant mass using WBoson
for line in accepted13_lines:
    muon = np.sqrt((2*line[1]+line[5]+line[9])**2-(2*line[2]+line[6]+line[10])**2-(2*line[3]+line[7]+line[11])**2-(2*line[4]+line[8]+line[12])**2)/2000
    w = np.sqrt((line[5]+line[9]+line[13]+line[21])**2-(line[6]+line[10]+line[14]+line[22])**2-(line[7]+line[11]+line[15]+line[23])**2-(line[8]+line[12]+line[16]+line[24])**2)/2000
    ivm13_muons.append(muon)
    ivm13_w.append(w)

ivm23_muons=[] #invariant mass using Muons
ivm23_w=[] #invariant mass using WBoson
for line in accepted23_lines:
    muon = np.sqrt((2*line[1]+line[5]+line[9])**2-(2*line[2]+line[6]+line[10])**2-(2*line[3]+line[7]+line[11])**2-(2*line[4]+line[8]+line[12])**2)/2000
    w = np.sqrt((line[5]+line[9]+line[17]+line[21])**2-(line[6]+line[10]+line[18]+line[22])**2-(line[7]+line[11]+line[19]+line[23])**2-(line[8]+line[12]+line[20]+line[24])**2)/2000
    ivm23_muons.append(muon)
    ivm23_w.append(w)
    
print ("1 & 2 Combinations // Calculating using Muons:", np.mean(ivm12_muons), "// Calculating using W Boson:", np.mean(ivm12_w))
print ("1 & 3 Combinations // Calculating using Muons:", np.mean(ivm13_muons), "// Calculating using W Boson:", np.mean(ivm13_w))
print ("2 & 3 Combinations // Calculating using Muons:", np.mean(ivm23_muons), "// Calculating using W Boson:", np.mean(ivm23_w))


import matplotlib.pyplot as plt

cols = ['t mass via {}'.format(col) for col in ["Muons", "Boson"]]
rows = ['J {}'.format(row) for row in ['1&2', '1&3', '2&3']]

fig, axes = plt.subplots(nrows=3, ncols=2, figsize=(20, 11))
for ax, col in zip(axes[0], cols):
    ax.set_title(col)

for ax, row in zip(axes[:,0], rows):
    ax.set_ylabel(row, rotation=0, size='large')

axes[0][0].hist(ivm12_muons, bins=40, range=(50,300))
axes[0][0].legend(title="Mean: "+str(np.mean(ivm12_muons)))
axes[0][0].set_xlabel('Mass of t (GeV)')
axes[0][1].hist(ivm12_w, bins=40, range=(50,300))
axes[0][1].legend(title="Mean: "+str(np.mean(ivm12_w)))
axes[0][1].set_xlabel('Mass of t (GeV)')
axes[1][0].hist(ivm13_muons, bins=40, range=(50,300))
axes[1][0].legend(title="Mean: "+str(np.mean(ivm13_muons)))
axes[1][0].set_xlabel('Mass of t (GeV)')
axes[1][1].hist(ivm13_w, bins=40, range=(50,300))
axes[1][1].legend(title="Mean: "+str(np.mean(ivm13_w)))
axes[1][1].set_xlabel('Mass of t (GeV)')
axes[2][0].hist(ivm23_muons, bins=40, range=(50,300))
axes[2][0].legend(title="Mean: "+str(np.mean(ivm23_muons)))
axes[2][0].set_xlabel('Mass of t (GeV)')
axes[2][1].hist(ivm23_w, bins=40, range=(50,300))
axes[2][1].legend(title="Mean: "+str(np.mean(ivm23_w)))
axes[2][1].set_xlabel('Mass of t (GeV)')
fig.tight_layout()
plt.savefig("mass of t all plots.png")
plt.show()

plt.hist(ivm13_w, bins=40, range=(50,300))
plt.xlabel("Mass of t (GeV)")
plt.title("Mass of t (GeV) for most accurate plot")
plt.savefig("mass of t for most accurate plot")
plt.show()
